/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  Overrides,
  BigNumberish,
  BytesLike,
} from "fuels";

interface CounterContractAbiInterface extends Interface {
  submit: {
    increment: FunctionFragment;
    decrement: FunctionFragment;
    get_counter: FunctionFragment;
  };
  submitResult: {
    increment: FunctionFragment;
    decrement: FunctionFragment;
    get_counter: FunctionFragment;
  };
  dryRun: {
    increment: FunctionFragment;
    decrement: FunctionFragment;
    get_counter: FunctionFragment;
  };
  dryRunResult: {
    increment: FunctionFragment;
    decrement: FunctionFragment;
    get_counter: FunctionFragment;
  };
  prepareCall: {
    increment: FunctionFragment;
    decrement: FunctionFragment;
    get_counter: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "increment",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "decrement",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_counter",
    values?: undefined
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "increment",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "decrement",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_counter",
    data: BytesLike
  ): DecodedValue;
}

export class CounterContractAbi extends Contract {
  interface: CounterContractAbiInterface;
  submit: {
    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    decrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    get_counter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;
  };
  submitResult: {
    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    decrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    get_counter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;
  };
  dryRun: {
    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    decrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    get_counter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;
  };
  dryRunResult: {
    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    decrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    get_counter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;
  };
  prepareCall: {
    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    decrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;

    get_counter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<bigint>;
  };

  increment(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<bigint>;

  decrement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<bigint>;

  get_counter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<bigint>;
}
