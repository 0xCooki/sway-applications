/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.30.0
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import { Interface, Contract } from "fuels";
import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import type {
  MultisigContractAbi,
  MultisigContractAbiInterface,
} from "../MultisigContractAbi";

const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "[_; 2]",
      components: [
        {
          name: "__array_element",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum AccessControlError",
      components: [
        {
          name: "CanOnlyBeAccessedByAnOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "enum ExecutionError",
      components: [
        {
          name: "IncorrectSignerOrdering",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InsufficientAssetAmount",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InsufficientApprovals",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 13,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "enum InitError",
      components: [
        {
          name: "CannotReinitialize",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "ThresholdCannotBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "TotalWeightCannotBeLessThanThreshold",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "enum MessageFormat",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "EIP191PersonalSign",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "enum MessagePrefix",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Ethereum",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 11,
          typeArguments: null,
        },
      ],
      typeParameters: [11],
    },
    {
      typeId: 10,
      type: "enum WalletType",
      components: [
        {
          name: "Fuel",
          type: 0,
          typeArguments: null,
        },
        {
          name: "EVM",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "raw untyped ptr",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct B512",
      components: [
        {
          name: "bytes",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct CancelEvent",
      components: [
        {
          name: "cancelled_nonce",
          type: 26,
          typeArguments: null,
        },
        {
          name: "user",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: "struct EvmAddress",
      components: [
        {
          name: "value",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: "struct ExecutedEvent",
      components: [
        {
          name: "data",
          type: 2,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 26,
          typeArguments: null,
        },
        {
          name: "to",
          type: 5,
          typeArguments: null,
        },
        {
          name: "value",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: "struct RawVec",
      components: [
        {
          name: "ptr",
          type: 12,
          typeArguments: null,
        },
        {
          name: "cap",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: [11],
    },
    {
      typeId: 20,
      type: "struct SetThresholdEvent",
      components: [
        {
          name: "previous_threshold",
          type: 26,
          typeArguments: null,
        },
        {
          name: "threshold",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 21,
      type: "struct SetWeightEvent",
      components: [
        {
          name: "user",
          type: 24,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 22,
      type: "struct SignatureInfo",
      components: [
        {
          name: "message_format",
          type: 7,
          typeArguments: null,
        },
        {
          name: "message_prefix",
          type: 8,
          typeArguments: null,
        },
        {
          name: "signature",
          type: 14,
          typeArguments: null,
        },
        {
          name: "wallet_type",
          type: 10,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 23,
      type: "struct TransferEvent",
      components: [
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 26,
          typeArguments: null,
        },
        {
          name: "to",
          type: 5,
          typeArguments: null,
        },
        {
          name: "value",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 24,
      type: "struct User",
      components: [
        {
          name: "address",
          type: 2,
          typeArguments: null,
        },
        {
          name: "weight",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 25,
      type: "struct Vec",
      components: [
        {
          name: "buf",
          type: 19,
          typeArguments: [
            {
              name: "",
              type: 11,
              typeArguments: null,
            },
          ],
        },
        {
          name: "len",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: [11],
    },
    {
      typeId: 26,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: "cancel_transaction",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "users",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 24,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "constructor",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "data",
          type: 2,
          typeArguments: null,
        },
        {
          name: "signatures",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 22,
              typeArguments: null,
            },
          ],
        },
        {
          name: "to",
          type: 5,
          typeArguments: null,
        },
        {
          name: "value",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "execute_transaction",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "data",
          type: 9,
          typeArguments: [
            {
              name: "",
              type: 2,
              typeArguments: null,
            },
          ],
        },
        {
          name: "signatures",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 22,
              typeArguments: null,
            },
          ],
        },
        {
          name: "threshold",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "set_threshold",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "data",
          type: 9,
          typeArguments: [
            {
              name: "",
              type: 2,
              typeArguments: null,
            },
          ],
        },
        {
          name: "signatures",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 22,
              typeArguments: null,
            },
          ],
        },
        {
          name: "user",
          type: 24,
          typeArguments: null,
        },
      ],
      name: "set_weight",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "data",
          type: 2,
          typeArguments: null,
        },
        {
          name: "signatures",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 22,
              typeArguments: null,
            },
          ],
        },
        {
          name: "to",
          type: 5,
          typeArguments: null,
        },
        {
          name: "value",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "transfer",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 2,
          typeArguments: null,
        },
      ],
      name: "approval_weight",
      output: {
        name: "",
        type: 26,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset_id",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "balance",
      output: {
        name: "",
        type: 26,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [],
      name: "nonce",
      output: {
        name: "",
        type: 26,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "threshold",
      output: {
        name: "",
        type: 26,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "data",
          type: 9,
          typeArguments: [
            {
              name: "",
              type: 2,
              typeArguments: null,
            },
          ],
        },
        {
          name: "nonce",
          type: 26,
          typeArguments: null,
        },
        {
          name: "threshold",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "threshold_hash",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "data",
          type: 2,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 26,
          typeArguments: null,
        },
        {
          name: "to",
          type: 5,
          typeArguments: null,
        },
        {
          name: "value",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "transaction_hash",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "data",
          type: 9,
          typeArguments: [
            {
              name: "",
              type: 2,
              typeArguments: null,
            },
          ],
        },
        {
          name: "nonce",
          type: 26,
          typeArguments: null,
        },
        {
          name: "user",
          type: 24,
          typeArguments: null,
        },
      ],
      name: "weight_hash",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: null,
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 15,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 18,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 14,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 15,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 16,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 17,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 18,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 19,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 20,
      loggedType: {
        name: "",
        type: 20,
        typeArguments: [],
      },
    },
    {
      logId: 21,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 22,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 23,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 24,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 25,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 26,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 27,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 28,
      loggedType: {
        name: "",
        type: 21,
        typeArguments: [],
      },
    },
    {
      logId: 29,
      loggedType: {
        name: "",
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 30,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 31,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 32,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 33,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 34,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 35,
      loggedType: {
        name: "",
        type: 4,
        typeArguments: [],
      },
    },
    {
      logId: 36,
      loggedType: {
        name: "",
        type: 23,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class MultisigContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): MultisigContractAbiInterface {
    return new Interface(_abi) as unknown as MultisigContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): MultisigContractAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as MultisigContractAbi;
  }
}
