/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.30.0
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export type AccessControlErrorInput = Enum<{ CanOnlyBeAccessedByAnOwner: [] }>;
export type AccessControlErrorOutput = AccessControlErrorInput;
export type ExecutionErrorInput = Enum<{ IncorrectSignerOrdering: [], InsufficientAssetAmount: [], InsufficientApprovals: [] }>;
export type ExecutionErrorOutput = ExecutionErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type InitErrorInput = Enum<{ CannotReinitialize: [], NotInitialized: [], ThresholdCannotBeZero: [], TotalWeightCannotBeLessThanThreshold: [] }>;
export type InitErrorOutput = InitErrorInput;
export type MessageFormatInput = Enum<{ None: [], EIP191PersonalSign: [] }>;
export type MessageFormatOutput = MessageFormatInput;
export type MessagePrefixInput = Enum<{ None: [], Ethereum: [] }>;
export type MessagePrefixOutput = MessagePrefixInput;
export type WalletTypeInput = Enum<{ Fuel: [], EVM: [] }>;
export type WalletTypeOutput = WalletTypeInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type B512Input = { bytes: [string, string] };
export type B512Output = B512Input;
export type CancelEventInput = { cancelled_nonce: BigNumberish, user: string };
export type CancelEventOutput = { cancelled_nonce: BN, user: string };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type EvmAddressInput = { value: string };
export type EvmAddressOutput = EvmAddressInput;
export type ExecutedEventInput = { data: string, nonce: BigNumberish, to: IdentityInput, value: BigNumberish };
export type ExecutedEventOutput = { data: string, nonce: BN, to: IdentityOutput, value: BN };
export type SetThresholdEventInput = { previous_threshold: BigNumberish, threshold: BigNumberish };
export type SetThresholdEventOutput = { previous_threshold: BN, threshold: BN };
export type SetWeightEventInput = { user: UserInput };
export type SetWeightEventOutput = { user: UserOutput };
export type SignatureInfoInput = { message_format: MessageFormatInput, message_prefix: MessagePrefixInput, signature: B512Input, wallet_type: WalletTypeInput };
export type SignatureInfoOutput = { message_format: MessageFormatOutput, message_prefix: MessagePrefixOutput, signature: B512Output, wallet_type: WalletTypeOutput };
export type TransferEventInput = { asset: ContractIdInput, nonce: BigNumberish, to: IdentityInput, value: BigNumberish };
export type TransferEventOutput = { asset: ContractIdOutput, nonce: BN, to: IdentityOutput, value: BN };
export type UserInput = { address: string, weight: BigNumberish };
export type UserOutput = { address: string, weight: BN };

interface MultisigContractAbiInterface extends Interface {
  functions: {
    cancel_transaction: FunctionFragment;
    constructor: FunctionFragment;
    execute_transaction: FunctionFragment;
    set_threshold: FunctionFragment;
    set_weight: FunctionFragment;
    transfer: FunctionFragment;
    approval_weight: FunctionFragment;
    balance: FunctionFragment;
    nonce: FunctionFragment;
    threshold: FunctionFragment;
    threshold_hash: FunctionFragment;
    transaction_hash: FunctionFragment;
    weight_hash: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'cancel_transaction', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'constructor', values: [Vec<UserInput>]): Uint8Array;
  encodeFunctionData(functionFragment: 'execute_transaction', values: [string, Vec<SignatureInfoInput>, IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_threshold', values: [Option<string>, Vec<SignatureInfoInput>, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_weight', values: [Option<string>, Vec<SignatureInfoInput>, UserInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer', values: [ContractIdInput, string, Vec<SignatureInfoInput>, IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'approval_weight', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'nonce', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'threshold', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'threshold_hash', values: [Option<string>, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'transaction_hash', values: [string, BigNumberish, IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'weight_hash', values: [Option<string>, BigNumberish, UserInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'cancel_transaction', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'execute_transaction', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_threshold', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_weight', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approval_weight', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'nonce', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'threshold', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'threshold_hash', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transaction_hash', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'weight_hash', data: BytesLike): DecodedValue;
}

export class MultisigContractAbi extends Contract {
  interface: MultisigContractAbiInterface;
  functions: {
    cancel_transaction: InvokeFunction<[], void>;
    constructor: InvokeFunction<[users: Vec<UserInput>], void>;
    execute_transaction: InvokeFunction<[data: string, signatures: Vec<SignatureInfoInput>, to: IdentityInput, value: BigNumberish], void>;
    set_threshold: InvokeFunction<[data: Option<string>, signatures: Vec<SignatureInfoInput>, threshold: BigNumberish], void>;
    set_weight: InvokeFunction<[data: Option<string>, signatures: Vec<SignatureInfoInput>, user: UserInput], void>;
    transfer: InvokeFunction<[asset_id: ContractIdInput, data: string, signatures: Vec<SignatureInfoInput>, to: IdentityInput, value: BigNumberish], void>;
    approval_weight: InvokeFunction<[user: string], BN>;
    balance: InvokeFunction<[asset_id: ContractIdInput], BN>;
    nonce: InvokeFunction<[], BN>;
    threshold: InvokeFunction<[], BN>;
    threshold_hash: InvokeFunction<[data: Option<string>, nonce: BigNumberish, threshold: BigNumberish], string>;
    transaction_hash: InvokeFunction<[data: string, nonce: BigNumberish, to: IdentityInput, value: BigNumberish], string>;
    weight_hash: InvokeFunction<[data: Option<string>, nonce: BigNumberish, user: UserInput], string>;
  };
}
