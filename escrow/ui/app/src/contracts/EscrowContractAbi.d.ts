/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from "fuels";

import type { Option, Enum, Vec } from "./common";

export type ArbiterInputErrorInput = Enum<{
  AssetDoesNotMatch: [];
  CannotBeBuyer: [];
  CannotBeSeller: [];
  FeeCannotBeZero: [];
  FeeDoesNotMatchAmountSent: [];
  PaymentTooLarge: [];
}>;
export type ArbiterInputErrorOutput = ArbiterInputErrorInput;
export type AssetInputErrorInput = Enum<{
  UnspecifiedAssets: [];
  AssetAmountCannotBeZero: [];
}>;
export type AssetInputErrorOutput = AssetInputErrorInput;
export type DeadlineInputErrorInput = Enum<{ MustBeInTheFuture: [] }>;
export type DeadlineInputErrorOutput = DeadlineInputErrorInput;
export type DepositErrorInput = Enum<{
  IncorrectAssetAmount: [];
  IncorrectAssetSent: [];
}>;
export type DepositErrorOutput = DepositErrorInput;
export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export type StateInput = Enum<{ Pending: []; Completed: [] }>;
export type StateOutput = StateInput;
export type StateErrorInput = Enum<{
  AlreadyDeposited: [];
  AlreadyDisputed: [];
  ArbiterHasNotBeenProposed: [];
  CannotDisputeBeforeDesposit: [];
  CannotResolveBeforeDesposit: [];
  CannotTakePaymentBeforeDeadline: [];
  CannotTakePaymentDuringDispute: [];
  CannotTransferBeforeDesposit: [];
  CannotWithdrawAfterDesposit: [];
  CannotWithdrawBeforeDeadline: [];
  EscrowExpired: [];
  NotDisputed: [];
  StateNotPending: [];
}>;
export type StateErrorOutput = StateErrorInput;
export type UserErrorInput = Enum<{ Unauthorized: [] }>;
export type UserErrorOutput = UserErrorInput;
export type UserInputErrorInput = Enum<{ InvalidRecipient: [] }>;
export type UserInputErrorOutput = UserInputErrorInput;

export type AcceptedArbiterEventInput = { identifier: BigNumberish };
export type AcceptedArbiterEventOutput = { identifier: BN };
export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ArbiterInput = {
  address: IdentityInput;
  asset: ContractIdInput;
  fee_amount: BigNumberish;
};
export type ArbiterOutput = {
  address: IdentityOutput;
  asset: ContractIdOutput;
  fee_amount: BN;
};
export type AssetInput = { amount: BigNumberish; id: ContractIdInput };
export type AssetOutput = { amount: BN; id: ContractIdOutput };
export type BuyerInput = {
  address: IdentityInput;
  asset: Option<ContractIdInput>;
  deposited_amount: BigNumberish;
};
export type BuyerOutput = {
  address: IdentityOutput;
  asset: Option<ContractIdOutput>;
  deposited_amount: BN;
};
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type CreatedEscrowEventInput = {
  escrow: EscrowInfoInput;
  identifier: BigNumberish;
};
export type CreatedEscrowEventOutput = {
  escrow: EscrowInfoOutput;
  identifier: BN;
};
export type DepositEventInput = {
  asset: ContractIdInput;
  identifier: BigNumberish;
};
export type DepositEventOutput = { asset: ContractIdOutput; identifier: BN };
export type DisputeEventInput = { identifier: BigNumberish };
export type DisputeEventOutput = { identifier: BN };
export type EscrowInfoInput = {
  arbiter: ArbiterInput;
  asset_count: BigNumberish;
  buyer: BuyerInput;
  deadline: BigNumberish;
  disputed: boolean;
  first_asset_index: BigNumberish;
  seller: SellerInput;
  state: StateInput;
};
export type EscrowInfoOutput = {
  arbiter: ArbiterOutput;
  asset_count: BN;
  buyer: BuyerOutput;
  deadline: BN;
  disputed: boolean;
  first_asset_index: BN;
  seller: SellerOutput;
  state: StateOutput;
};
export type PaymentTakenEventInput = { identifier: BigNumberish };
export type PaymentTakenEventOutput = { identifier: BN };
export type ProposedArbiterEventInput = {
  arbiter: ArbiterInput;
  identifier: BigNumberish;
};
export type ProposedArbiterEventOutput = {
  arbiter: ArbiterOutput;
  identifier: BN;
};
export type ResolvedDisputeEventInput = {
  identifier: BigNumberish;
  user: IdentityInput;
};
export type ResolvedDisputeEventOutput = {
  identifier: BN;
  user: IdentityOutput;
};
export type ReturnedDepositEventInput = { identifier: BigNumberish };
export type ReturnedDepositEventOutput = { identifier: BN };
export type SellerInput = { address: IdentityInput };
export type SellerOutput = { address: IdentityOutput };
export type TransferredToSellerEventInput = { identifier: BigNumberish };
export type TransferredToSellerEventOutput = { identifier: BN };
export type WithdrawnCollateralEventInput = { identifier: BigNumberish };
export type WithdrawnCollateralEventOutput = { identifier: BN };

interface EscrowContractAbiInterface extends Interface {
  functions: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
    arbiter_proposal: FunctionFragment;
    assets: FunctionFragment;
    escrow_count: FunctionFragment;
    escrows: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accept_arbiter",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_escrow",
    values: [ArbiterInput, Vec<AssetInput>, IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "propose_arbiter",
    values: [ArbiterInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "resolve_dispute",
    values: [BigNumberish, BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "return_deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "take_payment",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_to_seller",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw_collateral",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "arbiter_proposal",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "escrow_count", values: []): Uint8Array;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "accept_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_escrow",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "propose_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "resolve_dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "return_deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "take_payment",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_to_seller",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw_collateral",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "arbiter_proposal",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "assets", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "escrow_count",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "escrows",
    data: BytesLike
  ): DecodedValue;
}

export class EscrowContractAbi extends Contract {
  interface: EscrowContractAbiInterface;
  functions: {
    accept_arbiter: InvokeFunction<[identifier: BigNumberish], void>;
    create_escrow: InvokeFunction<
      [
        arbiter: ArbiterInput,
        assets: Vec<AssetInput>,
        buyer: IdentityInput,
        deadline: BigNumberish
      ],
      void
    >;
    deposit: InvokeFunction<[identifier: BigNumberish], void>;
    dispute: InvokeFunction<[identifier: BigNumberish], void>;
    propose_arbiter: InvokeFunction<
      [arbiter: ArbiterInput, identifier: BigNumberish],
      void
    >;
    resolve_dispute: InvokeFunction<
      [
        identifier: BigNumberish,
        payment_amount: BigNumberish,
        user: IdentityInput
      ],
      void
    >;
    return_deposit: InvokeFunction<[identifier: BigNumberish], void>;
    take_payment: InvokeFunction<[identifier: BigNumberish], void>;
    transfer_to_seller: InvokeFunction<[identifier: BigNumberish], void>;
    withdraw_collateral: InvokeFunction<[identifier: BigNumberish], void>;
    arbiter_proposal: InvokeFunction<
      [identifier: BigNumberish],
      Option<ArbiterOutput>
    >;
    assets: InvokeFunction<[identifier: BigNumberish], Option<AssetOutput>>;
    escrow_count: InvokeFunction<[], BN>;
    escrows: InvokeFunction<
      [identifier: BigNumberish],
      Option<EscrowInfoOutput>
    >;
  };
}
