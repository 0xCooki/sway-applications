/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
} from "fuels";

import type { Enum } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type ArbiterInput = {
  address: IdentityInput;
  asset: ContractIdInput;
  fee_amount: BigNumberish;
};

export type ArbiterOutput = {
  address: IdentityOutput;
  asset: ContractIdOutput;
  fee_amount: bigint;
};

export type AssetInput = { amount: BigNumberish; id: ContractIdInput };

export type AssetOutput = { amount: bigint; id: ContractIdOutput };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface EscrowAbiInterface extends Interface {
  functions: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accept_arbiter",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_escrow",
    values: [
      ArbiterInput,
      [AssetInput, AssetInput],
      IdentityInput,
      BigNumberish
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "propose_arbiter",
    values: [ArbiterInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "resolve_dispute",
    values: [BigNumberish, BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "return_deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "take_payment",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_to_seller",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw_collateral",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "accept_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_escrow",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "propose_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "resolve_dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "return_deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "take_payment",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_to_seller",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw_collateral",
    data: BytesLike
  ): DecodedValue;
}

export class EscrowAbi extends Contract {
  interface: EscrowAbiInterface;
  functions: {
    accept_arbiter: InvokeFunction<[identifier: BigNumberish], void>;

    create_escrow: InvokeFunction<
      [
        arbiter: ArbiterInput,
        assets: [AssetInput, AssetInput],
        buyer: IdentityInput,
        deadline: BigNumberish
      ],
      void
    >;

    deposit: InvokeFunction<[identifier: BigNumberish], void>;

    dispute: InvokeFunction<[identifier: BigNumberish], void>;

    propose_arbiter: InvokeFunction<
      [arbiter: ArbiterInput, identifier: BigNumberish],
      void
    >;

    resolve_dispute: InvokeFunction<
      [
        identifier: BigNumberish,
        payment_amount: BigNumberish,
        user: IdentityInput
      ],
      void
    >;

    return_deposit: InvokeFunction<[identifier: BigNumberish], void>;

    take_payment: InvokeFunction<[identifier: BigNumberish], void>;

    transfer_to_seller: InvokeFunction<[identifier: BigNumberish], void>;

    withdraw_collateral: InvokeFunction<[identifier: BigNumberish], void>;
  };
}
