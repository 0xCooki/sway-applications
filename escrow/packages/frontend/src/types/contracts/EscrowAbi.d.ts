/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  Overrides,
  BigNumberish,
  BytesLike,
  CallResult,
  ScriptTransactionRequest,
  TransactionResult,
} from "fuels";

export type AddressInput = { value: string };

export type Address = { value: string };

export type ContractIdInput = { value: string };

export type ContractId = { value: string };

export type IdentityInput = {
  Address: AddressInput;
  ContractId: ContractIdInput;
};

export type Identity = { Address: Address; ContractId: ContractId };

export type ArbiterInput = {
  address: IdentityInput;
  asset: ContractIdInput;
  fee_amount: BigNumberish;
};

export type Arbiter = {
  address: Identity;
  asset: ContractId;
  fee_amount: bigint;
};

export type AssetInput = { amount: BigNumberish; id: ContractIdInput };

export type Asset = { amount: bigint; id: ContractId };

interface EscrowAbiInterface extends Interface {
  submit: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };
  submitResult: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };
  dryRun: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };
  dryRunResult: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };
  simulate: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };
  simulateResult: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };
  prepareCall: {
    accept_arbiter: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accept_arbiter",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_escrow",
    values: [ArbiterInput, any, IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "propose_arbiter",
    values: [ArbiterInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "resolve_dispute",
    values: [BigNumberish, BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "return_deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "take_payment",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_to_seller",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw_collateral",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "accept_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_escrow",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "propose_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "resolve_dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "return_deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "take_payment",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_to_seller",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw_collateral",
    data: BytesLike
  ): DecodedValue;
}

export class EscrowAbi extends Contract {
  interface: EscrowAbiInterface;
  submit: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;
  };
  submitResult: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<TransactionResult<any>>;
  };
  dryRun: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;
  };
  dryRunResult: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;
  };
  prepareCall: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ScriptTransactionRequest>;
  };
  simulate: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<void>;
  };
  simulateResult: {
    accept_arbiter(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    create_escrow(
      arbiter: ArbiterInput,
      assets: any,
      buyer: IdentityInput,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    dispute(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    propose_arbiter(
      arbiter: ArbiterInput,
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    resolve_dispute(
      identifier: BigNumberish,
      payment_amount: BigNumberish,
      user: IdentityInput,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    return_deposit(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    take_payment(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    transfer_to_seller(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;

    withdraw_collateral(
      identifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<CallResult>;
  };

  accept_arbiter(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  create_escrow(
    arbiter: ArbiterInput,
    assets: any,
    buyer: IdentityInput,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  deposit(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  dispute(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  propose_arbiter(
    arbiter: ArbiterInput,
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  resolve_dispute(
    identifier: BigNumberish,
    payment_amount: BigNumberish,
    user: IdentityInput,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  return_deposit(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  take_payment(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  transfer_to_seller(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;

  withdraw_collateral(
    identifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<void>;
}
