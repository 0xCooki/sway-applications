/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type ArbiterInput = {
  address: IdentityInput;
  asset: ContractIdInput;
  fee_amount: BigNumberish;
};

export type ArbiterOutput = {
  address: IdentityOutput;
  asset: ContractIdOutput;
  fee_amount: BN;
};

export type AssetInput = { amount: BigNumberish; id: ContractIdInput };

export type AssetOutput = { amount: BN; id: ContractIdOutput };

export type BuyerInput = {
  address: IdentityInput;
  asset: OptionInput;
  deposited_amount: BigNumberish;
};

export type BuyerOutput = {
  address: IdentityOutput;
  asset: OptionOutput;
  deposited_amount: BN;
};

export type SellerInput = { address: IdentityInput };

export type SellerOutput = { address: IdentityOutput };

export type EscrowInfoInput = {
  arbiter: ArbiterInput;
  assets: [any, any];
  buyer: BuyerInput;
  deadline: BigNumberish;
  disputed: boolean;
  seller: SellerInput;
  state: StateInput;
};

export type EscrowInfoOutput = {
  arbiter: ArbiterOutput;
  assets: [any, any];
  buyer: BuyerOutput;
  deadline: BN;
  disputed: boolean;
  seller: SellerOutput;
  state: StateOutput;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

export type OptionInput = Option<[]>;

export type OptionOutput = Option<[]>;

export type StateInput = Enum<{ Pending: []; Completed: [] }>;

export type StateOutput = Enum<{ Pending: []; Completed: [] }>;

interface EscrowAbiInterface extends Interface {
  functions: {
    accept_arbiter: FunctionFragment;
    arbiter_escrows: FunctionFragment;
    arbiter_proposals: FunctionFragment;
    buyer_escrows: FunctionFragment;
    create_escrow: FunctionFragment;
    deposit: FunctionFragment;
    dispute: FunctionFragment;
    escrows: FunctionFragment;
    propose_arbiter: FunctionFragment;
    resolve_dispute: FunctionFragment;
    return_deposit: FunctionFragment;
    seller_escrows: FunctionFragment;
    take_payment: FunctionFragment;
    transfer_to_seller: FunctionFragment;
    withdraw_collateral: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accept_arbiter",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "arbiter_escrows",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "arbiter_proposals",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "buyer_escrows",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_escrow",
    values: [ArbiterInput, [any, any], IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "propose_arbiter",
    values: [ArbiterInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "resolve_dispute",
    values: [BigNumberish, BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "return_deposit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "seller_escrows",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "take_payment",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_to_seller",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw_collateral",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "accept_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "arbiter_escrows",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "arbiter_proposals",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "buyer_escrows",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_escrow",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "escrows",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "propose_arbiter",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "resolve_dispute",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "return_deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "seller_escrows",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "take_payment",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_to_seller",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw_collateral",
    data: BytesLike
  ): DecodedValue;
}

export class EscrowAbi extends Contract {
  interface: EscrowAbiInterface;
  functions: {
    accept_arbiter: InvokeFunction<[identifier: BigNumberish], void>;

    arbiter_escrows: InvokeFunction<[arbiter: IdentityInput], [any]>;

    arbiter_proposals: InvokeFunction<[identifier: BigNumberish], OptionOutput>;

    buyer_escrows: InvokeFunction<[buyer: IdentityInput], [any]>;

    create_escrow: InvokeFunction<
      [
        arbiter: ArbiterInput,
        assets: [any, any],
        buyer: IdentityInput,
        deadline: BigNumberish
      ],
      void
    >;

    deposit: InvokeFunction<[identifier: BigNumberish], void>;

    dispute: InvokeFunction<[identifier: BigNumberish], void>;

    escrows: InvokeFunction<[identifier: BigNumberish], EscrowInfoOutput>;

    propose_arbiter: InvokeFunction<
      [arbiter: ArbiterInput, identifier: BigNumberish],
      void
    >;

    resolve_dispute: InvokeFunction<
      [
        identifier: BigNumberish,
        payment_amount: BigNumberish,
        user: IdentityInput
      ],
      void
    >;

    return_deposit: InvokeFunction<[identifier: BigNumberish], void>;

    seller_escrows: InvokeFunction<[seller: IdentityInput], [any]>;

    take_payment: InvokeFunction<[identifier: BigNumberish], void>;

    transfer_to_seller: InvokeFunction<[identifier: BigNumberish], void>;

    withdraw_collateral: InvokeFunction<[identifier: BigNumberish], void>;
  };
}
